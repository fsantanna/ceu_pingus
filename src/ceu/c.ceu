#ifndef _C_CEU
#define _C_CEU

#define XXX_YES

native _assert(),
       _malloc();

native @const _stdout, _stderr;

native @nohold _FILE,
               _fopen(),
               _fprintf(),
               _fflush(),
               _free(),
               _printf(),
               _sprintf(),
               _rand(),
               _srand();

native @pure _abs(),
             _strcmp(),
             _strcpy();

///// USEFUL STUFF /////

native/pre do
    ##define PTR2REF(v) v
    ##define addr(x) &x
    ##define deref(x) *x
    ##define delete_obj(x) delete x;
end

native @pure _PTR2REF; //convert any pointer (*) to any reference (&?)
native @pure _addr(), _deref(), _delete_obj();

native @pure _print_message(); //this could be used to write message in log -- with filename and line

/* TODO: __? */
native @nohold __();

/* TODO: search for XXX_* and fix! */

#define XXX_FIN(var,val)    \
    finalize                \
        var = val;          \
    with                    \
        nothing;            \
    end
#define XXX_NO_FIN(a,b) XXX_FIN(a,b)

#define XXX_DEF_STR(id)         \
    var _std__string&? id;      \
    finalize                    \
        id = &_new_String();    \
    with                        \
        _delete_obj(&& id !);   \
    end

#define AWAIT_N(e, n)       \
    loop i in n do          \
        await e;            \
    end

#define PRE_CONDITION_AWAIT(e, c) \
    if not (c) then \
        await e until (c); \
    end

native/pre do
    ##define globals__static_graphics globals::static_graphics

    ##define XXX_ERROR(msg) printf(msg); assert(0)
    ##define XXX_PURE_ID(v) v
end

native do
    ##define Display__get_framebuffer() Display::get_framebuffer()
    ##define Display__get_width() Display::get_width()
    ##define Display__get_height() Display::get_height()
    ##define Display__get_framebuffer() Display::get_framebuffer()
    ##define Display__flip_display() Display::flip_display()

    ##define StatManager__instance StatManager::instance
    ##define new_SceneContext(rect) new SceneContext(rect)
    ##define new_SceneContextDrawingRequest(a, b, c) new SceneContextDrawingRequest(a, b, c)

    ##define new_Vector_String new std::vector<std::string>
    ##define std__vector_String std::vector<std::string>
end
native @pure _Display__get_framebuffer(), _Display__flip_display(),
             _Display__get_width(), _Display__get_height();
native @pure _new_SceneContext(), _new_SceneContextDrawingRequest(), _StatManager__instance();

native @pure _SU2str();

native @pure _new_Vector_String();
native @pure _XXX_PURE_ID();


#endif
