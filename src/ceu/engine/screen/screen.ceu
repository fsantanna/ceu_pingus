#ifndef ISCREEN_CEU
#define ISCREEN_CEU

#include "../gui/igui_manager.ceu"

native/pre do
    ##include "engine/screen/gui_screen.hpp"
    ##include "engine/screen/screen.hpp"

    ##define new_GUIScreen() new GUIScreen()
    ##define const_Input__Event const Input::Event
    ##define const_Input__ButtonEvent const Input::ButtonEvent
end

native @pure _new_GUIScreen(), _log_debug(), _log_error();

input _GUIScreen&& ON_STARTUP;
input _GUIScreen&& ON_ARMAGEDDON_PRESS;
input _GUIScreen&& ON_ARMAGEDDON_RELEASE;
input _GUIScreen&& ON_ESCAPE_PRESS;
input _GUIScreen&& ON_ESCAPE_RELEASE;
input _GUIScreen&& ON_PAUSE_PRESS;
input _GUIScreen&& ON_PAUSE_RELEASE;
input _GUIScreen&& ON_SINGLE_STEP_PRESS;
input _GUIScreen&& ON_SINGLE_STEP_RELEASE;
input _GUIScreen&& ON_FAST_FORWARD_PRESS;
input _GUIScreen&& ON_FAST_FORWARD_RELEASE;
input _GUIScreen&& ON_ACTION_UP_PRESS;
input _GUIScreen&& ON_ACTION_DOWN_PRESS;
input _ScreenUpdateEventPackage&& SCREEN_UPDATE_EVENT;
input _ScreenDrawPackage&& SCREEN_DRAW_BACKGROUND;
input _ScreenDrawPackage&& SCREEN_DRAW_FOREGROUND;
input _ScreenResizePackage&& SCREEN_RESIZE;
input _ScreenAxisMovePackage&& ON_ACTION_AXIS_MOVE;

interface Screen with
    var _GUIScreen&? me;

    event _DrawingContext&& call_draw;
    event _const_Input__Event&& call_update_event;

    event _DrawingContext&& draw_background;
    event _DrawingContext&& draw_foreground;
    event _const_Input__Event&& update_event;

    event (int, int) resize;

    event void on_startup;
    event void on_armageddon_press;
    event void on_armageddon_release;
    event void on_escape_press;
    event void on_escape_release;
    event void on_pause_press;
    event void on_pause_release;
    event void on_single_step_press;
    event void on_single_step_release;
    event void on_fast_forward_press;
    event void on_fast_forward_release;
    event void on_action_up_press;
    event void on_action_up_release;
    event void on_action_down_press;
    event void on_action_down_release;
    event float on_action_axis_move;
end

class ScreenFramework with
    var Screen& screen;
    var IGUIManager&& gui_manager = null;

    event _const_Input__ButtonEvent&& process_button_event;
do
    par do
        every gc in screen.call_draw do
            var _DrawingContext&? ref = &_addr(_deref(gc));
            emit screen.draw_background => (&&ref!);
            if gui_manager then
                emit gui_manager:draw => (&&ref!);
            end
            emit screen.draw_foreground => (&&ref!);
        end
    with
        every e in screen.call_update_event do
            var _const_Input__Event&? ref = &_deref(_addr(e));
            var _const_Input__Event& ref_ = &ref!;
            // Dispatch the recieved input events
            if gui_manager then
                emit gui_manager:update_event => (&&ref_);
            end

            if ref_.type == {Input::BUTTON_EVENT_TYPE} then
                emit process_button_event => _addr(ref_.button);
            else/if ref_.type == {Input::AXIS_EVENT_TYPE} then
                if ref_.axis.name == {Input::ACTION_AXIS} then
                    emit screen.on_action_axis_move => ref_.axis.dir;
                end
            end

            emit screen.update_event => (&&ref_);
        end
    with
        every e in process_button_event do
            var _const_Input__ButtonEvent&? ref = &_addr(_deref(e));
            var _const_Input__Event& ref_ = &ref!;
            if ref_.state == {Input::BUTTON_PRESSED} then
                if ref_.name == {Input::PRIMARY_BUTTON} or e:name == {Input::SECONDARY_BUTTON} then
                    // ignoring, handled in the gui_manager
                else/if ref_.name == {Input::PAUSE_BUTTON} then
                    emit screen.on_pause_press;
                else/if ref_.name == {Input::SINGLE_STEP_BUTTON} then
                    emit screen.on_single_step_press;
                else/if ref_.name == {Input::FAST_FORWARD_BUTTON} then
                    emit screen.on_fast_forward_press;
                else/if ref_.name == {Input::ARMAGEDDON_BUTTON} then
                    emit screen.on_armageddon_press;
                else/if ref_.name == {Input::ESCAPE_BUTTON} then
                    emit screen.on_escape_press;
                else/if ref_.name == {Input::ACTION_UP_BUTTON} then
                    emit screen.on_action_up_press;
                else/if ref_.name == {Input::ACTION_DOWN_BUTTON} then
                    emit screen.on_action_down_press;
                else
                    _log_debug("unhandled event: %1%", ref_.name);
                end
            else/if ref_.state == {Input::BUTTON_RELEASED} then
                if ref_.name == {Input::PRIMARY_BUTTON} or e:name == {Input::SECONDARY_BUTTON} then
                    // ignoring, handled in the gui_manager
                else/if ref_.name == {Input::PAUSE_BUTTON} then
                    emit screen.on_pause_release;
                else/if ref_.name == {Input::SINGLE_STEP_BUTTON} then
                    emit screen.on_single_step_release;
                else/if ref_.name == {Input::FAST_FORWARD_BUTTON} then
                    emit screen.on_fast_forward_release;
                else/if ref_.name == {Input::ARMAGEDDON_BUTTON} then
                    emit screen.on_armageddon_release;
                else/if ref_.name == {Input::ESCAPE_BUTTON} then
                    emit screen.on_escape_release;
                else/if ref_.name == {Input::ACTION_UP_BUTTON} then
                    emit screen.on_action_up_release;
                else/if ref_.name == {Input::ACTION_DOWN_BUTTON} then
                    emit screen.on_action_down_release;
                else
                    _log_debug("unhandled event: %1%", ref_.name);
                end
            else
                _log_error("got unknown event.state: %1%", ref_.state);
            end
        end
    with
        every screen_ptr in ON_STARTUP do
            if screen_ptr == &&screen.me! then
                emit screen.on_startup;
            end
        end
    with
        loop do
            var _ScreenResizePackage&& package = await SCREEN_RESIZE until package:screen == &&screen.me!;

            if gui_manager then
                ((_GUI_RectComponent&&)&&gui_manager:me):set_rect(_Rect(_Vector2i(0, 0), package:size) finalize with end);
            end

            var int w = package:size.width;
            var int h = package:size.height;

            await 10ms; //hack

            emit screen.resize => (w, h);
        end
    end
end

#endif
